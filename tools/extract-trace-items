#!/usr/local/bin/clisp  -norc -q -ansi -E utf-8
;; -*- mode:lisp;coding:utf-8 -*-
;; #!/usr/local/bin/clisp  -norc -q -ansi -E utf-8  -on-error debug

(in-package "COMMON-LISP-USER")

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *extract-trace-items-help* "

The extract-trace-items script scans an org-file containings tagged
paragraphs: sections starting with a tag

Paragraphs starting with tag numbers in brackets [Lnnnn] and ending
with ¶ are tracable elements.  They are extracted to feed a tracing
database or a TO-DO list.  They may be duplicated (same tag number)
for legibility of the text.

Note: within the brackets, there may be several tag numbers separated
with dots, representing a hierachical dependency path.  A tag number
may have several dependents (parents) in the graph: the same items is
reused in the specification of the parent item.

Only the last tag number in the path identifies the item (paragraph).

Usage:

   extract-trace-items [--help] [--todo]  input-files…

Without the --todo option, a simple text report of the tagged
paragraphs found is printed.

With the --todo option, and org-mode formatted section of TODO items
is printed.

"))

(defpackage "COM.INFORMATIMAGO.TOOLS.EXTRACT-TRACE-ITEMS"
  (:use "COMMON-LISP")
  (:export "MAIN")
  (:import-from "COMMON-LISP-USER" "*EXTRACT-TRACE-ITEMS-HELP*")
  (:documentation #.common-lisp-user::*extract-trace-items-help*))
(in-package "COM.INFORMATIMAGO.TOOLS.EXTRACT-TRACE-ITEMS")

#|
We could allow:

    [S9999] blah [S8888] blah blah ¶ blah ¶

to be equivalent to:

    [S9999] blah ¶
    [S9999.S8888] blah blah ¶
|#

(defconstant +paragraph-open+      #\[)
(defconstant +tag-separator+       #\.)
(defconstant +paragraph-tag-end+   #\])
(defconstant +table-open+          #\|
  "Lines starting with that character are considered to be tables, and are kept as-is.")
(defconstant +paragraph-close+     #\¶)
(defconstant +whitespaces+        #(#\space #\tab))
(defconstant +newlines+           #(#\newline #\return #\linefeed))


(defstruct (item (:type list))
  code
  dependents
  dependencies
  text)

(defun split-string (string &optional (separators " ") (remove-empty nil))
  "
STRING:         A sequence.

SEPARATOR:      A sequence.

RETURN:         A list of subsequence of STRING, split upon any element of SEPARATORS.
                Separators are compared to elements of the STRING with EQL.

NOTE:           It's actually a simple split-sequence now.

EXAMPLES:       (split-string '(1 2 0 3 4 5 0 6 7 8 0 9) '(0))
                --> ((1 2) (3 4 5) (6 7 8) (9))
                (split-string #(1 2 0 3 4 5 0 6 7 8 0 9) #(0))
                --> (#(1 2) #(3 4 5) #(6 7 8) #(9))
                (split-string \"1 2 0 3 4 5 0 6 7 8\" '(#\space #\0))
                --> (\"1\" \"2\" \"\" \"\" \"3\" \"4\" \"5\" \"\" \"\" \"6\" \"7\" \"8\")
"
  (loop
    :with strlen = (length string)
    :for position = 0 :then (1+ nextpos)
    :for nextpos = (position-if (lambda (e) (find e separators)) string :start position)
    :unless (and remove-empty
                 (or (and (= position strlen) (null nextpos))
                     (eql position nextpos)))
    :collect (subseq string position nextpos)
    :while nextpos))

(defun whitespacep (ch)
  (find ch +whitespaces+))

(defun newlinep (ch)
  (find ch +newlines+))

(defun clean-item-text (text)
  (string-capitalize
   (with-output-to-string (*standard-output*)
     (loop
       :with state := :newline
       :for ch :across (string-trim " -" text)
       :do (case state
             (:space    (cond
                          ((whitespacep ch))
                          ((newlinep ch)
                           (write-char ch)
                           (setf state :newline))
                          (t
                           (write-char #\space)
                           (write-char ch)
                           (setf state :word))))
             (:word     (cond
                          ((whitespacep ch)
                           (setf state :space))
                          ((newlinep ch)
                           (write-char ch)
                           (setf state :newline))
                          (t
                           (write-char ch))))
             (:newline (cond ((whitespacep ch))
                             ((newlinep ch)
                              (write-char ch))
                             ((char= +table-open+ ch)
                              (write-char ch)
                              (setf state :table))
                             (t
                              (write-char ch)
                              (setf state :word))))
             (:table  (cond ((newlinep ch)
                             (write-char ch)
                             (setf state :newline))
                            (t
                             (write-char ch)))))))
   :end 1))

(defun extract-trace-items (input-files)
  (let ((items (make-hash-table :test (function equal))))
    (dolist (input-file input-files)
      (with-open-file (input input-file
                             :element-type 'character)
        (loop
          :with depends := '()
          :with code := nil
          :with item := '()
          :with state := :out
          :with tag := '()
          :for ch := (read-char input nil nil)
          :while ch
          :do (case state
                (:out     (when (char= +paragraph-open+ ch)
                            (setf tag '()
                                  state :code)))
                (:code    (cond
                            ((or (digit-char-p ch)
                                 (char= +tag-separator+ ch)
                                 (and (alpha-char-p ch)
                                      (upper-case-p ch)))
                             (push ch tag))
                            ((char= +paragraph-tag-end+ ch)
                             (setf depends (split-string (coerce (nreverse tag) 'string) "." t)
                                   code    (first (last depends))
                                   item    '()
                                   state   :item))
                            (t ;; Invalid code character in brackets, let's ignore it.
                             (setf state :out))))
                (:item (if (char= +paragraph-close+ ch)
                           (progn
                             (push (make-item
                                    :code code
                                    :dependents depends
                                    :text (clean-item-text
                                           (coerce (nreverse item) 'string)))
                                   (gethash code items '()))
                             (setf state :out))
                           (push ch item))))
          :finally (unless (eq state :out)
                     (error "End of file in ~A state." state)))))
    items))

(defun item-list (items)
  (let ((item-list '()))
    (maphash (lambda (code item-data)
               (declare (ignore code))
               (push item-data item-list))
             items)
    (sort item-list (function string<)
          :key (lambda (items) (item-code (first items))))))

(defun reconcile-items (item-list)
  "
When there are more than one paragraph with the same tag, we need to
see if they're the same or if they're different, to decide on whether
we must concatenate them or just remove the duplicate.
"
  (let ((items (make-hash-table :test (function equal))))
    (dolist (item-descs item-list)
      (let ((item (if (rest item-descs)
                      ;; More than one paragraph for the same tag:
                      ;; let's compute a new item merging them.
                      (let ((code (item-code (first item-descs)))
                            (paths '())
                            (texts '()))
                        (dolist (item item-descs)
                          (push (item-dependents item) paths)
                          (push (item-text       item) texts))
                        (let ((paths (remove 1 (remove-duplicates paths :test (function equalp))
                                             :key (function length)))
                              (texts (remove-duplicates texts :test (function string-equal))))
                          (if (rest texts)
                              (progn
                                (warn "Multiple different texts for item ~A:~{~A~%~}~%"
                                      code texts)
                                (make-item
                                 :code code
                                 :dependents paths
                                 :text (format nil "~{~A~%~}" texts)))
                              (make-item
                               :code code
                               :dependents paths
                               :text (first texts)))))
                      ;; Only one paragraph for the tag: we just
                      ;; update the dependencies, removing the item
                      ;; itself from its dependents.
                      (let ((item (first item-descs)))
                        (setf (item-dependents item)
                              (let ((path (item-dependents item)))
                                (if (= 1 (length path))
                                    '()
                                    (list path))))
                        item))))
        (setf (gethash (item-code item) items) item)))
    (maphash (lambda (code item)
               (dolist (dependent (item-dependents item))
                 (push code (item-dependencies
                             (or (gethash (first (last dependent 2)) items)
                                 (warn "Unknown dependent code: ~A for item ~A."
                                       (first (last dependent 2))
                                       code)
                                 (go next))))
                 next))
             items)
    (let ((item-list '()))
      (maphash (lambda (code item)
                 (declare (ignore code))
                 (push item item-list))
               items)
      (sort item-list (function string<)
            :key (lambda (item) (item-code item))))))

(defun report-trace-items (item-list)
  (let ((*print-case* :upcase))
    (format t "~:{~A (~{~{~A~^.~}~^ ~}) (~{~A~^ ~})~%~A~2%~}"
            item-list)))

(defun first-line (text)
  (let ((newline (position #\newline text)))
    (if newline
        (values (subseq text 0 newline) text)
        (values text nil))))

(defun print-todo-list-for-items (item-list)
  (let ((*print-case* :upcase))
    (format t "* TO DO~%")
    (dolist (item item-list)
      (destructuring-bind (code dependents dependencies text) item
        (multiple-value-bind (first-line body) (first-line text)
          (format t "~%** TODO [~A] ~A~%" code first-line)
          (when (or (when dependents
                      (format t "~%Dependents: ~{~{~A~^.~}~^ ~}" dependents)
                      t)
                    (when dependencies
                      (format t "~%Dependencies: ~{~A~^ ~}" dependencies)
                      t)
                    (when body
                      (format t "~%~A" (string-trim #(#\newline) body))
                      t))
            (format t "~%")))))))

(defun usage ()
  (write-line "extract-trace-items usage:")
  (write-string *extract-trace-items-help*))

(defun main (arguments)
  ;; usage: extract-trace-items [--todo] specifications.org
  (let ((todo nil))
    (if (member "--help" arguments :test (function string-equal))
        (usage)
        (progn
          (when (string= "--todo" (first arguments))
            (pop arguments)
            (setf todo t))
          (let ((input-files arguments))
            (funcall (if todo
                         (function print-todo-list-for-items)
                         (function report-trace-items))
                     (reconcile-items
                      (item-list
                       (extract-trace-items input-files)))))))))


#-testing
(ext:quit (handler-case (progn (main ext:*args*)
                               0)
            (error (err)
              (format *error-output* "~&ERROR: ~A~%" err)
              1)))
#-(and)
(ext:quit (main ext:*args*))
