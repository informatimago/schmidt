# -*- mode:org;coding:utf-8 -*-

#+AUTHOR: Pascal J. Bourguignon
#+EMAIL: pjb@informatimago.com
#+DATE: 09 September 2018
#+TITLE: Specifications of the MIDI Librarian for the Schmidt Synthesizer

#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage[autolanguage]{numprint} % Must be loaded *after* babel.
#+LATEX_HEADER: \usepackage{rotating}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage[margin=0.75in]{geometry}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{positioning, fit, calc, shapes, arrows}
#+LATEX_HEADER: \usepackage[underline=false]{pgf-umlsd}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \pagestyle{fancyplain}
#+LATEX_HEADER: \pagenumbering{arabic}
#+LATEX_HEADER: \lhead{\small{Schmidt Synthesizer}}
#+LATEX_HEADER: \chead{}
#+LATEX_HEADER: \rhead{\small{Specifications of the MIDI Librarian for the Schmidt Synthesizer}}
#+LATEX_HEADER: \lfoot{}
#+LATEX_HEADER: \cfoot{\tiny{\copyright{} Pascal J. Bourguignon}}
#+LATEX_HEADER: \rfoot{\small{Page \thepage \hspace{1pt} de \pageref{LastPage}}}


#+LATEX: \newpage
* Specifications MIDI Librarian

The *MIDI Librarian* application lets the user edit sets and banks of
programs, to save sysex files (=.syx=) containing programs, banks or
sets, and when possible, to communicate with the MIDI synthesizer to
transfer programs, banks or sets, either in batch or during
interactive use.

Additionnal entities may be edited, to help organizing programs, banks
and sets off-line.

#+BEGIN_EXAMPLE

    entry ::= directory | program-file .
    directory ::= name { entry } .
    program-file ::= name { program } .
    program ::= name category data .
    bank ::= number 256* program .
    set  :=  8* bank . -- unique bank numbers.y

    category ::= name color .
    categories ::= 64* category . -- unique colors.

#+END_EXAMPLE

** Functionalities
*** Introduction

The purpose of the *MIDI Librarian* is to help editing and managing
presets and banks of presets for the *Schmidt Synthesizer*.

- *visualization*: when a preset is selected on the synthesizer, it should be
  displayed on the tablet screen, showing notably the setting of the
  knobs, which is not reflected on the physical dead knobs.  This
  display of the preset settings should be graphical (eg. envelops)
  and calibrated (for times and periods), to aid visualising the sound
  that would be generated.

- *editing*: some preset editing is provided, but we don't want to replace
  the physical button and knob editing that is the strong point of a
  control panel such as the one of the *Schmidt Synthesizer*.   On the
  other hand, preset renaming, changing or copying parameters globally
  to a group of presets, applying editing macros to one or multiple
  presets, for sophisticated editing, are features that should be
  provided.

- *management*: presets are organized in banks on the synthesizer.
  We want to be able to easily save, copy and move presets among
  banks, and to save, copy and move banks.

- *sharing*: presets and banks of presets can be stored on the cloud,
  and can be shared amongst users of the *Schmidt Synthesizer*.  (No
  sale/buying is envisionned since the number of *Schmidt Synthesizer*
  is limited, selling presets for them doesn't offer a big enough
  market).

*** Categories

For the Schmidt Synthesizer, the *categories* are names given to the
predefined set of colors (0â€¦63).  *Categories* are lists of 64 names.
Each *BankSet* has it own list of *Categories*, initialized with the
default list.


- Edit the list of default categories:

   - select the default list of categories.

   - select a category in the default list.

   - edit its name.


- Edit the list of categories of a BankSet:

   - select a BankSet.

   - select the list of categories.

   - select a category in the default list.

   - edit its name.

*** General

Currently, we can only transfer single banks or multi banks manually.
Sending or receiving a whole set requires 16 manual operations (8
single banks, and 8 multi banks).

Therefore we will provide the basic functionality of sending and
receiving banks.  Sending a BankSet will involve sending the 16 banks with
manual synchronization.

- Configure MIDI: select the MIDI bus and the Send and Receive MIDI Channels.

- Listen for Sysex messages to automatically initiate the reception of
  banks.  When received a bank Sysex, store it in a new Bank, and
  store the bank in a new BankSet.  The banks are numbered, so we can fill
  the BankSet. A new BankSet is created if a bank of the same kind and number
  is sent again.  The bank and sets are automatically given a default
  name containing a time stamp.


- search and select for programs upon various criteria:

  + name (regexp),

  + parameter values or ranges, (eg. all programs with: *Group1.VCF1
    on and VCF1.InputA.Level>100*)

- batch set parameters to programs.  This can be represented as an
  icon on the desktop, and dragging programs from banks to that icon
  would modify the program.  Eg. to set the performance parameters
  (after-touch, modulation wheel, X/Y joystick), or the category
  (colors).

- sort programs in banks according to criteria:

  + name

  + category

  + parameters (eg. sort upon *VCF1.Cutoff, VCF2.Cutoff, DF1.Cutoff,
    DF2.Cutoff*, or sort upon *VCA.Attack, VCA.Decay*, etc).


- generate random programs.

- convert programs from one synthesizer to the other (direct mapping of parameters).

*** Synthesizer Program Visualization

Listen for Bank Change/Program Change messages.  Upon receiving a Bank
Change/Program Change:

- if possible query the synthesizer for the current program parameters
  if not, assume the parameters from the corresponding program in the
  saved BankSet dump.

- display the current program parameters.

- Listen for NPRN messages to automatically update the current
  program, and update its display.

*** Bank

- Send a Bank:

  - select a Bank,

  - activate the sending process (click on the send button).

*** BankSet

- Send a BankSet:

  - select a BankSet,

  - activate the sending process (click on the send button): this will
    send each bank in the set in turn, waiting for user confirmation
    between the sending of two banks (so the user may save the bank on
    the Schmidt synthesizer, in the right place).



BankSets and Banks are stored each in their own hierarchical directory
tree.  Programs are usually stored in banks, but they can also be
stored stand-alone in their own hierarchical directory tree.

*** Manipulation of a Directory Tree

- create directory
- rename directory
- move directories and items in the tree
- delete an empty directory
- delete recursively a filled directory (!)
- create an item in a directory
- delete an item from a directory
- rename an item from a directory
- select one or more items in the directory tree (for further manipulations, like opening, etc).

*** Manipulation of Banks

- open a bank : the list of programs in the bank is shown.

- close an opened bank.

Banks can be selected from the bank directory tree (from any "open"
directory), from the desktop, or from open BankSets.

- move (or make copies) from one to eight selected banks, to the
  directory tree, the desktop or to an existing open set.

- create a new set and fill it with (copies of) the selected banks.

- send from one to eight selected banks to a Schmidt synthesizer
  (represented as an icon on the desktop).

*** Manipulation of BankSets

- open a set :  the list of banks in the set is shown.

- close an opened set.

BankSets can be selected from the set directory tree (from any "open"
directory), or from the desktop.

- move (or make copies) of the selected sets to the directory tree or
  the desktop.

- send one selected set to a Schmidt synthesizer
  (represented as an icon on the desktop).

*** Manipulation of Programs

- open a program : shows the parameters of the program.
- close an opened program.
- rename a program
- set the category/color of selected programs.

Programs can be selected from the program directory tree (from any "open"
directory), from the desktop, or from an open bank.

- move (or make copies) of the selected programs to the directory
  tree, the desktop, or an open bank.

- send one selected program to a Schmidt synthesizer (currently, this
  only configures the current program of the synthesizer sending NPRN
  messages).

*** Manipulation of the Synthesizer

- opening the Synthesizer icon will show the current program
  parameters, updated as PC, BC and NPRN messages are received.


|             | categories | program     | bank           | bankset        | synthesizer    |
|-------------+------------+-------------+----------------+----------------+----------------|
| category    | No         | Set cat/col | Set cat/col(1) | Set cat/col(1) | No             |
| categories  | No         | No          | No             | No             | No             |
| program     | No         | No          | Store          | No             | Send(NPRN)     |
| bank        | No         | No          | No             | Store          | Send(SysEx)    |
| bankset     | No         | No          | No             | No             | Send(SysEx)(2) |
| synthesizer | No         | No          | No             | No             | No             |

** User Interface

We show a Desktop with "icons", "strips" and "windows".


- icon:

    pair of image and name representing some object.

- strip:

    text in a box representing some object. (the box may also contain some (small) images).


- window:

    rectangular area containing further user interface elements.



We use icons to represent connected synthesizers.
We use strips to represent categories, directories, programs, banks and banksets.

Some desktop elements are "hard wired" representing static (root) elements:

- the default categories list.
- the saved program directory.
- the saved bank directory.
- the saved bankset directory.
- the connected synthesizer.

Those elements cannot be removed from the desktop by the user (the
synthesizer can be disconneted, and then its icon disappear, but it's
not done directly by the user).  They can be moved and arranged by the
user as she wishes.

The saved programs, banks, and banksets can be moved on the desktop.
In that case, the strip on the desktop is but an alias of the element;
the element is still visible in its original place.



** Cloud

*** User Account Creation

The user can create a user account (nickname, email, password) on the *Cloud*, and connect to it.
Then, in addition to loading and saving to local directories, it will be possible to save and load to cloud directories.
One directory on the cloud is a public directory that is readable by any other user.
The root cloud directory will show a list of public directories, one for each users.

#+BEGIN_EXAMPLE

-- read-only part:
/cloud/emc/factory-v1
/cloud/informatimago/nice-sounds
/cloud/informatimago/jmj-sounds

-- read-write part on the cloud:
/mycloud/public
/mycloud/public/nice-sounds
/mycloud/public/jmj-sounds
/mycloud/tests
/mycloud/my-concert/part1
/mycloud/my-concert/part2

-- read-write part stored locally:
/local/my-concert/part1
/local/my-concert/part2

#+END_EXAMPLE

